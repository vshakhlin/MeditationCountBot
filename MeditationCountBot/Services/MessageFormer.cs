using System.Text;
using MeditationCountBot.Dto;

namespace MeditationCountBot.Services;

public class MessageFormer : IMessageFormer
{
    private ITimeFormatter _timeFormatter;

    public MessageFormer(ITimeFormatter timeFormatter)
    {
        _timeFormatter = timeFormatter;
    }

    public string CreateMessage(CounterDto counterDto)
    {
        var sb = new StringBuilder(
            $"–û–±—â–µ–µ –≤—Ä–µ–º—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ {counterDto.Today.TotalMinutes} \\({counterDto.Today.Hours} {_timeFormatter.HoursFormat(counterDto.Today.Hours)} {counterDto.Today.Minutes} {_timeFormatter.MinutesFormat(counterDto.Today.Minutes)}\\)");

        if (counterDto.Yesterday != TimeSpan.Zero)
        {
            if (counterDto.Today > counterDto.Best)
            {
                sb.Append($"\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é\\! –£ –Ω–∞—Å –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ {counterDto.Today.TotalMinutes}");
            }
            else if (counterDto.Today > counterDto.Yesterday)
            {
                sb.Append(
                    $"\n–ù–∞ {counterDto.Today.TotalMinutes - counterDto.Yesterday.TotalMinutes} –ª—É—á—à–µ —á–µ–º –≤—á–µ—Ä–∞\\. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å\\! ‚ù§Ô∏è");
            }
            else if (counterDto.Today < counterDto.Yesterday)
            {
                sb.Append(
                    $"\n–ù–∞ {counterDto.Yesterday.TotalMinutes - counterDto.Today.TotalMinutes} –º–µ–Ω—å—à–µ —á–µ–º –≤—á–µ—Ä–∞\\. –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å\\! üôè");
            }
        }

        int lastDays = int.MaxValue;
        foreach (var participantDto in counterDto.Participants.OrderByDescending(p => p.ContinuouslyDays))
        {
            if (participantDto.ContinuouslyDays <= 1)
            {
                break;
            }
            if (lastDays != participantDto.ContinuouslyDays)
            {
                lastDays = participantDto.ContinuouslyDays;
                sb.Append($"\n\n–ú–µ–¥–∏—Ç–∏—Ä—É—é—Ç {lastDays} {_timeFormatter.DaysFormat(lastDays)} –ø–æ–¥—Ä—è–¥:");    
            }
            sb.Append($"\n \\- {FormatName(participantDto)}"); 
            
        }

        return sb.ToString();
    }

    private string FormatName(ParticipantDto participantDto)
    {
        var sb = new StringBuilder();
        if (!string.IsNullOrEmpty(participantDto.FirstName))
        {
            sb.Append(participantDto.FirstName);
        }
        
        if (!string.IsNullOrEmpty(participantDto.LastName))
        {
            sb.Append(' ').Append(participantDto.LastName);
        }
        
        if (!string.IsNullOrEmpty(participantDto.Username))
        {
            sb.Append(" (@").Append(participantDto.Username).Append(")");
        }

        return MarkdownHelper.Escape(sb.ToString());
    }
    
}