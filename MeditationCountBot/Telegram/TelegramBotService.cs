using MeditationCountBot.Services;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace MeditationCountBot.Telegram;

public class TelegramBotService : ITelegramBotService
{
    private ITelegramBotClient _botClient;
    private string _username;
    private readonly ILogger<TelegramMessageHandler> _logger;
    private readonly ICounterService _counterService;
    private readonly IDateTimeService _dateTimeService;
    private readonly IMessagesStore _messagesStore;

    public TelegramBotService(
        ICounterService counterService,
        ILogger<TelegramMessageHandler> logger,
        IDateTimeService dateTimeService, 
        IMessagesStore messagesStore)
    {
        _counterService = counterService;
        _logger = logger;
        _dateTimeService = dateTimeService;
        _messagesStore = messagesStore;
    }

    public void Initialize(string key, string username)
    {
        _logger.LogInformation("Initialize bot");
        var botClient = new TelegramBotClient(key, 
            new HttpClient()
            {
                Timeout = TimeSpan.FromMinutes(3),
            });

        _username = username;
        _botClient = botClient;
        SubscribeUpdates(botClient, new CancellationToken());
    }

    public string BotUsername => _username;

    private void SubscribeUpdates(
        TelegramBotClient botClient,
        CancellationToken cancellationToken)
    {
        var receiverOptions = new ReceiverOptions
        {
            AllowedUpdates = { }, // receive all update types
        };

        var handler = new TelegramMessageHandler(this, _counterService, _logger, _dateTimeService, _messagesStore);
        botClient.StartReceiving(
            handler.HandleUpdateAsync,
            handler.HandleErrorAsync,
            receiverOptions,
            cancellationToken
        );
    }

    public async Task<Message> SendInstructionMessageAsync(
        long chatIdLong,
        CancellationToken cancellationToken,
        int? messageId)
    {
        var botClient = GetBotClient();

        return await botClient.SendTextMessageAsync(
            chatId: chatIdLong,
            replyToMessageId: messageId, 
            text: "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç \\- –∫–æ—Ç–æ—Ä—ã–π —Å—É–º–º–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞\\!\n\n–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç \\+ –∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: \\+15, \\+30, \\+60 –∏ —Ç\\.–¥\\.\n–†–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: \n\n\"–û–±—â–µ–µ –≤—Ä–µ–º—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ 202 \\(3 —á–∞—Å–∞ 22 –º–∏–Ω—É—Ç—ã\\)\\. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å\"\n\n–ê —Ç–∞–∫–∂–µ –±—É–¥—É –≤—ã–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–¥–∏—Ç–∏—Ä—É—é—Ç –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞:\n\n\"–ú–µ–¥–∏—Ç–∏—Ä—É—é—Ç 10 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥:\n \\- –ê–ª–µ–∫—Å–∞–Ω–¥—Ä \n–ú–µ–¥–∏—Ç–∏—Ä—É—é—Ç 2 –¥–Ω—è –ø–æ–¥—Ä—è–¥:\n \\- –ú–∞—Ä–∏–Ω–∞\"\n–∏ —Ç\\.–¥\\. \n\n–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞ –≤–∞—à–µ–º –ø—É—Ç–∏ –∏ –±—É–¥–µ—Ç –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É‚ù§Ô∏èüôè \n_\\(–ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É @vshakhlin\\)_",
            parseMode: ParseMode.MarkdownV2,
            cancellationToken: cancellationToken);
    }
    
    public async Task<Message> SendStartOrHelpMessageAsync(
        long chatIdLong,
        string textKey,
        string language,
        CancellationToken cancellationToken)
    {
        var botClient = GetBotClient();

        return await botClient.SendTextMessageAsync(
            chatId: chatIdLong,
            text: "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É @vshakhlin",
            parseMode: ParseMode.MarkdownV2,
            disableNotification: true,
            cancellationToken: cancellationToken);
    }

    public async Task<Message> SendTextMessageAsync(
        long chatIdLong,
        string text,
        string language,
        string messageId,
        bool isComplain,
        CancellationToken cancellationToken)
    {
        var botClient = GetBotClient();
        
        return await botClient.SendTextMessageAsync(chatId: chatIdLong,
            text: text,
            parseMode: ParseMode.MarkdownV2,
            disableNotification: true,
            // replyToMessageId: update.Message.MessageId,
            // replyMarkup: isComplain ? new InlineKeyboardMarkup(
            //     InlineKeyboardButton.WithCallbackData(
            //         _localizationService.GetTranslation("Complain", language),
            //         messageId)) : default,
            cancellationToken: cancellationToken);
    }

    private ITelegramBotClient GetBotClient()
    {
        return _botClient;
    }
}